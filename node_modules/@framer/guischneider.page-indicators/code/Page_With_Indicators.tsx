import * as React from "react"
import { useState } from "react"
import {
    Frame,
    Page,
    PropertyControls,
    ControlType,
    addPropertyControls,
} from "framer"

export function PageWithIndicators(props) {
    const [pageNumber, setPageNumber] = useState(0)
    return (
        // Creates Page component
        <Frame style={container}>
            <Page
                style={PageComponent}
                //Add Interface Controls
                gap={props.gap}
                defaultEffect={props.effect}
                overflow={props.carouselOverflow}
                onChangePage={currentPage => {
                    setPageNumber(currentPage)
                }}
            >
                {props.children}
            </Page>
            <Frame
                style={PagersContainer}
                width={props.pagerContainerWidth}
                bottom={props.pagerPosition * -1}
            >
                {props.children.map((child, index) => {
                    return (
                        <Frame
                            style={pagers}
                            width={props.pagerWidth}
                            height={props.pagerHeight}
                            borderRadius={props.pagerRadius}
                            background={props.pagerBg}
                            animate={{
                                opacity:
                                    index === pageNumber
                                        ? 1
                                        : props.pagerOpacity,
                                scale: index === pageNumber ? 1 : 1,
                            }}
                            key={child.key}
                        />
                    )
                })}
            </Frame>
        </Frame>
    )
}

PageWithIndicators.defaultProps = {
    gap: 10,
    pagerWidth: 8,
    pagerHeight: 8,
    toggle: true,
    carouselOverflow: "hidden",
    pagerOpacity: 0.5,
    width: 320,
    height: 320,
}

//Create Control to add multiple pages
addPropertyControls(PageWithIndicators, {
    children: {
        type: ControlType.Array,
        propertyControl: { type: ControlType.ComponentInstance },
    },

    //Pager Container Props
    pagerContainerWidth: {
        title: "Width",
        type: ControlType.Number,
        defaultValue: 200,
        min: 0,
        max: 500,
        unit: "px",
        step: 1,
        displayStepper: false,
    },
    pagerPosition: {
        title: "Position",
        type: ControlType.Number,
        defaultValue: 40,
        min: -20,
        max: 200,
        unit: "px",
        step: 1,
        displayStepper: false,
    },

    //Pager Props

    pagerWidth: {
        title: "Pager Width",
        type: ControlType.Number,
        defaultValue: 8,
        min: 0,
        max: 100,
        unit: "px",
        step: 1,
        displayStepper: false,
    },
    pagerHeight: {
        title: "Pager Height",
        type: ControlType.Number,
        defaultValue: 8,
        min: 0,
        max: 100,
        unit: "px",
        step: 1,
        displayStepper: false,
    },
    pagerRadius: {
        title: "Radius",
        type: ControlType.Number,
        defaultValue: 4,
        min: 0,
        max: 100,
        unit: "px",
        step: 1,
        displayStepper: true,
    },
    pagerBg: {
        title: "Color",
        type: ControlType.Color,
        defaultValue: "#fff",
    },
    pagerOpacity: {
        title: "Opacity",
        type: ControlType.Number,
        defaultValue: 0.5,
        min: 0,
        max: 1,
        unit: "%",
        step: 0.05,
        displayStepper: false,
    },

    //Page Component Props
    gap: {
        title: "Gap",
        type: ControlType.Number,
        defaultValue: 10,
        min: 0,
        max: 100,
        unit: "px",
        step: 1,
        displayStepper: false,
    },
    effect: {
        title: "Effect",
        type: ControlType.Enum,
        defaultValue: "none",
        options: ["none", "cube", "coverflow", "wheel", "pile"],
        optionTitles: ["None", "Cube", "Coverflow", "Wheel", "Pile"],
    },
    carouselOverflow: {
        title: "Overflow",
        type: ControlType.SegmentedEnum,
        defaultValue: "visible",
        options: ["visible", "hidden"],
        optionTitles: ["Show", "Hide"],
    },
})

//CSS properties

const container: React.CSSProperties = {
    width: "100%",
    height: "100%",
    background: "transparent",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
}
const PageComponent: React.CSSProperties = {
    width: "100%",
    height: "100%",
    display: "flex",
}
const PagersContainer: React.CSSProperties = {
    height: "8px",
    // bottom: -40,
    background: "transparent",
    display: "flex",
    justifyContent: "space-around",
}

const pagers: React.CSSProperties = {
    position: "relative",
}
